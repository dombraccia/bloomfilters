#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 3cm
\rightmargin 3cm
\bottommargin 3cm
\headheight 3cm
\headsep 3cm
\footskip 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
CMSC858D: Homework 2
\end_layout

\begin_layout Author
Domenick J.
 Braccia
\end_layout

\begin_layout Section*
Task 1 – Basic Bloom Filter
\end_layout

\begin_layout Subsection*
Implementation
\end_layout

\begin_layout Subsubsection*
Determining 'M' and 'k'
\end_layout

\begin_layout Standard
Given a target False Discovery Rate p, and number of elements inserted n,
 the size of the bit vector can be found with:
\end_layout

\begin_layout Standard
\begin_inset Formula 
\[
m=-\frac{n\mathrm{ln\mathit{p}}}{(\mathrm{ln}2)^{2}}
\]

\end_inset


\end_layout

\begin_layout Standard
And the number of hash functions to use can be found with: 
\begin_inset Formula 
\[
k=\frac{m}{n}\mathrm{ln}2
\]

\end_inset


\end_layout

\begin_layout Standard
I then implemented the functional script `bf.py build` to build Bloom filters
 over N elements from randomly generated k-mers of length 100.
 Each nucleotide was sampled with uniform probability at each position in
 the k-mer.
 To build a Bloom filter over 1 000 000 100-mers, that meant that I needed
 to define a Bloom filter of size m = 
\series bold
4792529 bits
\series default
 with k =
\series bold
 ~ 3.32 (rounded to 4) hash functions.
 
\series default
To query the built Bloom filter, I implemented the `bf.py query` function
 as instructed in the problem description.
\end_layout

\begin_layout Subsection*
Most difficult Part
\end_layout

\begin_layout Standard
The part of this assignment that I found to be most difficult was in actually
 setting up the Bloom filter data structure and constructor function.
 I initially started implementing it in C++, as I thought it would be easier
 to have control over the bitvector and the data members of the Bloom filter.
 Unfortunately, this turned out to be more challenging than I had thought;
 library dependencies, build errors and debugging build errors were a nightmare
 for me in C++, so, I switched to implementing in Python.
 At this point in the project, I had already spent 15 or so hours reacquainting
 myself with Bloom filter basics, so once I switched to Python, I was able
 to complete the implementation of a constructor, and a query method in
 about 2.5 hours.
\end_layout

\begin_layout Subsection*
Results
\end_layout

\begin_layout Standard
To test my implementation of the Bloom filter (BF), I generated BFs with
 varying number of input 100-mers, Ns = {1 000, 10 000, 100 000, 1 000 000,
 10 000 000}, and a varying False Positive Rate (FPR), FPRs = {0.01, 0.05,
 0.10, 0.20, 0.25}.
 For each combination of N and FPR, I issued three sets of queries: one
 set had 100 100-mers fully contained in the BF, the second had 50 100-mers
 present in the BF and 50 not present, and the third had zero 100-mers present
 in the BF and 100 not present.
 These correspond to the 
\begin_inset Quotes eld
\end_inset

100pct
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

50pct
\begin_inset Quotes erd
\end_inset

, and 
\begin_inset Quotes eld
\end_inset

0pct
\begin_inset Quotes erd
\end_inset

 labels in figures 2 and 3 below, respectively.
\end_layout

\begin_layout Standard

\series bold
Note
\series default
: For each `by.py build` step, I specified the number of distinct keys in
 the keyfile to be exactly N every time, without actually calcuating that
 vale.
 Since I randomly genererated nucleotides of 100-mers from a uniform distributio
n, the maximum probability of randomly generating a repeat 100-mer was 
\begin_inset Formula $Pr(repeat)\sum_{n}^{N}\frac{n}{4^{k}}$
\end_inset

, where k = 100 and N can vary from 1E+03 to 1E+07.
 Even when generating 1E+07 100-mers, 
\begin_inset Formula $Pr(repeat)\eqsim10^{-47}$
\end_inset

.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/empericalFPR_VS_theoreticalFPR.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Measurment of emperical FPR vs.
 theoretical FPR of all query streams (100pct, 50pct and 0pct) and N values.
 The emperical FPR valeus at each point are averaged from varying N's and
 query streams.
 The error bars are Standard Error (SE).
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 1 shows that the emperical FPR matches that of the theoretical FPR
 from the BF build step.
 All emperical FPRs besides 0.25 seemed to be very close to their theoretical
 underpinning.
 The SE bar on the point corresponding to a theoretical FPR of 0.25 does
 not seem to cross over the expected value of 0.25 on the y-axis.
 With more samples and measurments, this would likely return to a more reasonabl
e value in the emperical ~0.25 range.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/query_time_by_query_type.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
Average query time by query type.
 
\series default
These query time averages are across all values of N and FPR.
 Error bars are SE.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
In Figure 2, average query time across all three query streams (100pct,
 50pct and 0pct) are show.
 There is a general decrease in the query time as percent present in the
 BF decreases.
 This is because the algorithm I implemented for checking membership of
 a key in a BF breaks after the first hash value checked is not present
 in the corresponding BF.
 For queries that are present in the BF, each hash value from each independant
 hash function must be calculated and checked in order to report membership.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/avg_query_time_by_N_qType.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Average query time with varying N and across query types.
 The averaged values are across FPR, and error bars are SE.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
There seems to be very little to no relationship between query time, query
 type and N value, as evidenced by Figure 3.
 The query time seemed to randomly spike for different query types at different
 values of N, not following any particular trend.
 For example, the query time for the 0pct type spikes for N = 10 000, but
 then returns to moderately low values for increasing N.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/avg_q_time_by_N_FPR.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
Average query time with varying N and across FPRs
\series default
.
 The averaged values are across query types, and error bars are SE.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 4, much like Figure 3, seem to suggest that there is very little
 interplay between query time, N, and FPR.
 The query time, again, randomly spikes for different FPRs at different
 values of N, not following one well defined pattern.
 The spikes seem to be due to one or a few outliers, since the error bars
 for those averages are quite large.
\end_layout

\begin_layout Section*
Task 2 – Blocked Bloom Filter
\end_layout

\begin_layout Subsection*
Implementation
\end_layout

\begin_layout Standard
The implementation for the Blocked Bloom filter was fairly straight forward
 once I had the data structure for the regular Bloom filter in place.
 Instead of calculating a hash value for each hash function for a given
 kmer and then flipping those bits in the Bloom filter, I let the first
 hash value determine which block to flip all the rest of the bits for that
 kmer.
 
\end_layout

\begin_layout Subsection*
Most difficult Part
\end_layout

\begin_layout Standard
The most difficult part of this task was just figuring out how to initially
 modify my existing Bloom filter to become a blocked one.
 Once I realized I can keep a similar bit vector (but extending it to fill
 out the final block should it not match up to the requested block size)
 and just change the first hash value calculated to be the one that determines
 which block I should insert 1's into, the rest was easy.
 
\end_layout

\begin_layout Subsection*
Plots
\end_layout

\begin_layout Standard
All of the plots for this section were made in the same way as the previous
 section, on regular Bloom filters.
 The only difference here is that I used less query sets and FPRs to benchmark
 the results.
 I tested average query time and emperical vs.
 theroetical FPR for N = {1000, 10 000, 100 000, 1 000 000} and FPR = {0.01,
 0.1, 0.2} and combinations therein.
\end_layout

\begin_layout Standard
The difference in average query time between the 100pct query stream and
 the 50pct query stream are nearly the same, and there is a significant
 drop in time from the 50pct to the 0pct stream, as we saw with the regular
 Bloom filter (Figure 5).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/blocked_avg_querytime_by_type.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
Average query time by query type.
 
\series default
These query time averages are across all values of N and FPR.
 Error bars are SE.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The measurments of the emperical FPR seemed to be close to the theoretical
 values, though for the FPR 0.20 filter, the emperical FPR was a bit lower
 than expected.
 By increasing the query size and stratifying by query stream, it is likely
 that the error bars would fall within the expected FPR or 0.20 (Figure 6).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/empFPR_vs_theoreticalFPR.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Measurment of emperical FPR vs.
 theoretical FPR of all query streams (100pct, 50pct and 0pct) and N values.
 The emperical FPR values at each point are averaged from varying N's and
 query streams.
 The error bars are Standard Error (SE).
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The main consistency with average query time by N and query type is that
 the 0pct stream has the lowest average query time across all values of
 N.
 This is to be expected for the same reasons as the regular Bloom filter
 (Figure 7).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/blocked_avg_qtime_by_N_and_qtype.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
Average query time with varying N and across query types
\series default
.
 The averaged values are across FPR, and error bars are SE.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
With a lower FPR, the average query time is consistently high accross all
 values of N.
 This makes sense since the algorithm for checking membership in the blocked
 Bloom filter has to go through more iterations before it can return a 
\begin_inset Quotes eld
\end_inset

Y
\begin_inset Quotes erd
\end_inset

 or a 
\begin_inset Quotes eld
\end_inset

N
\begin_inset Quotes erd
\end_inset

 to the k-mer query.
 As FPR increases, the query time decreases, on average (Figure 8).
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename /Users/dome/Desktop/UMD/CMSC858D/Homework/HW2/figures/blocked_avg_qtime_byN_and_fpr.png
	scale 70

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout

\series bold
Average query time with varying N and across FPRs
\series default
.
 The averaged values are across query types, and error bars are SE.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
